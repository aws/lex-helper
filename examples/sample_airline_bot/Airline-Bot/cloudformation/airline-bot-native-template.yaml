AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Airline-Bot with Lambda layer, Lambda function, and Lex bot using native resources'

Parameters:
  S3BucketName:
    Type: String
    Description: S3 bucket containing deployment artifacts
  
  LexHelperLayerKey:
    Type: String
    Description: S3 key for the Lex Helper layer zip file
    Default: lex_helper_layer.zip
  
  LambdaFunctionKey:
    Type: String
    Description: S3 key for the Lambda function zip file
    Default: AirlineBotAPGLambda.zip
  
  BotImportKey:
    Type: String
    Description: S3 key for the Lex bot import zip file
    Default: AirlineBot.zip
    
  BotAliasName:
    Type: String
    Description: Name for the Lex bot alias
    Default: ProductionAlias

Resources:
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'

  # IAM Role for Lex bot
  LexBotRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LexRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lexv2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LexLambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-AirlineBotFulfillment"
        - PolicyName: LexCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 
                  - !GetAtt BotLogGroup.Arn
                  - !Sub "${BotLogGroup.Arn}:*"
                  
  # IAM Role for Lex conversation logs
  LexConversationLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LexLogsRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lexv2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LexCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource:
                  - !GetAtt BotLogGroup.Arn
                  - !Sub "${BotLogGroup.Arn}:*"
  
  # Lambda Layer for lex_helper
  LexHelperLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}-lex-helper"
      Description: Lex Helper framework for simplified Lex bot development
      CompatibleRuntimes:
        - python3.13
      Content:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref LexHelperLayerKey
      LicenseInfo: Apache-2.0
  

  # Lambda function for fulfillment
  AirlineBotFulfillmentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AirlineBotFulfillment"
      Runtime: python3.13
      Handler: fulfillment_function.lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref LambdaFunctionKey
      Layers:
        - !Ref LexHelperLayer
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          MESSAGES_YAML_PATH: "fulfillment_function/messages"


  # Native Lex Bot resource
  AirlineBot:
    Type: AWS::Lex::Bot
    Properties:
      Name: AirlineBot
      RoleArn: !GetAtt LexBotRole.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      Description: Voice and Chat bot to handle essential functionalities of an airline customer.
      AutoBuildBotLocales: true
      BotFileS3Location:
        S3Bucket: !Ref S3BucketName
        S3ObjectKey: !Ref BotImportKey
      BotLocales:
        - LocaleId: en_US
          Description: "English US locale for AirlineBot"
          NluConfidenceThreshold: 0.4
          VoiceSettings:
            VoiceId: Joanna
        - LocaleId: it_IT
          Description: "Italian locale for AirlineBot"
          NluConfidenceThreshold: 0.4
          VoiceSettings:
            VoiceId: Carla
      TestBotAliasSettings:
        Description: "Test alias for AirlineBot"
        ConversationLogSettings:
          TextLogSettings:
            - Destination:
                CloudWatch:
                  CloudWatchLogGroupArn: !GetAtt BotLogGroup.Arn
                  LogPrefix: "AirlineBot"
              Enabled: true
        SentimentAnalysisSettings:
          DetectSentiment: false
        BotAliasLocaleSettings:
          - LocaleId: en_US
            BotAliasLocaleSetting:
              Enabled: true
              CodeHookSpecification:
                LambdaCodeHook:
                  LambdaArn: !GetAtt AirlineBotFulfillmentFunction.Arn
                  CodeHookInterfaceVersion: '1.0'
          - LocaleId: it_IT
            BotAliasLocaleSetting:
              Enabled: true
              CodeHookSpecification:
                LambdaCodeHook:
                  LambdaArn: !GetAtt AirlineBotFulfillmentFunction.Arn
                  CodeHookInterfaceVersion: '1.0'

  # Create a bot alias separately
  AirlineBotAlias:
    Type: AWS::Lex::BotAlias
    Properties:
      BotId: !Ref AirlineBot
      BotAliasName: !Ref BotAliasName
      Description: "Production alias for AirlineBot"
      SentimentAnalysisSettings:
        DetectSentiment: false
      ConversationLogSettings:
        TextLogSettings:
          - Destination:
              CloudWatch:
                CloudWatchLogGroupArn: !GetAtt BotLogGroup.Arn
                LogPrefix: "AirlineBot"
            Enabled: true
      BotAliasLocaleSettings:
        - LocaleId: en_US
          BotAliasLocaleSetting:
            Enabled: true
            CodeHookSpecification:
              LambdaCodeHook:
                LambdaArn: !GetAtt AirlineBotFulfillmentFunction.Arn
                CodeHookInterfaceVersion: '1.0'
        - LocaleId: it_IT
          BotAliasLocaleSetting:
            Enabled: true
            CodeHookSpecification:
              LambdaCodeHook:
                LambdaArn: !GetAtt AirlineBotFulfillmentFunction.Arn
                CodeHookInterfaceVersion: '1.0'

  # CloudWatch Log Group for bot logs
  BotLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lex/${AWS::StackName}-AirlineBot"
      RetentionInDays: 7

  # Permission for Lex to invoke Lambda from any bot alias
  LexLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AirlineBotFulfillmentFunction.Arn
      Principal: lexv2.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/${AirlineBot}/*"

Outputs:
  LexHelperLayerArn:
    Description: ARN of the Lex Helper Lambda layer
    Value: !Ref LexHelperLayer
      
  LambdaFunctionArn:
    Description: ARN of the Airline Bot fulfillment Lambda function
    Value: !GetAtt AirlineBotFulfillmentFunction.Arn
  
  BotId:
    Description: ID of the Airline Bot
    Value: !Ref AirlineBot